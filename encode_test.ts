import { assertEquals } from "jsr:@std/assert";
import { encode } from "./encode.ts";
import * as fc from "fast-check";
import { arbs } from "./arb.ts";

Deno.test("encode examples", () => {
  // deno-fmt-ignore
  const values = [
    // B0
    0, 7, 2n,
    true, false,
    {code: 0x20, level: 1, bytes: new Uint8Array()},
    {code: 0x2F, level: 0, bytes: new Uint8Array()},

    // B1
    -1, -128, 8, 255, -255n,
    {code: 0x30, level: 0, bytes: new Uint8Array([0x42])},
    {code: 0x31, level: 2, bytes: new Uint8Array([0x42])},
    {code: 0x3F, level: 0, bytes: new Uint8Array([0x42])},
    
    // B2
    -256, -32768, 256, 65535, -32767n,
    {code: 0x40, level: 0, bytes: new Uint8Array([0x42, 0x43])},
    {code: 0x41, level: 3, bytes: new Uint8Array([0x42, 0x43])},
    {code: 0x4F, level: 0, bytes: new Uint8Array([0x42, 0x43])},
    
    // B3
    -65536, -8388608, 65536, 16777215, -8388607n,
    {code: 0x50, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44])},
    {code: 0x51, level: 2, bytes: new Uint8Array([0x42, 0x43, 0x44])},
    {code: 0x5F, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44])},
    
    // B4
    -16777216, -2147483648, 16777216, 4294967295, -2147483647n,
    {code: 0x60, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45])},
    {code: 0x61, level: 1, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45])},
    {code: 0x6F, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45])},
    
    // B5
    -4294967296n, -549755813888n, 4294967296n, 1099511627775n, -549755813887n,
    {code: 0x0B, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46])},
    {code: 0x1C, level: 2, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46])},
    {code: 0x0B, level: 1, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46])},
    
    // B6
    -1099511627776n, -140737488355328n, 1099511627776n, 281474976710655n, -140737488355327n,
    {code: 0x0A, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47])},
    {code: 0x1D, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47])},
    {code: 0x1D, level: 2, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47])},
    
    // B7
    -281474976710656n, -36028797018963968n, 281474976710656n, 72057594037927935n, -36028797018963967n,
    {code: 0x09, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48])},
    {code: 0x1E, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48])},
    {code: 0x1E, level: 3, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48])},
    
    // B8
    -72057594037927936n, -9223372036854775808n, 72057594037927936n, 18446744073709551615n, -9223372036854775807n,
    3.14159, -2.71828, Infinity, -Infinity,
    {code: 0x08, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49])},
    {code: 0x1F, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49])},
    {code: 0x1F, level: 1, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49])},
    
    // B16
    {code: 0x80, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51])},
    {code: 0x81, level: 2, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51])},
    {code: 0x8F, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51])},
    
    // S
    "", "ABC", "\0",
    { code: 0x9F, level: 1, bytes: new Uint8Array([0x00, 0xFF]) },

    // T
    { code: 0xA0, level: 2, values: [false] },
    { code: 0xB0, level: 0, values: [false, false] },
    { code: 0xC0, level: 0, values: [false, false, false] },
    { code: 0xD0, level: 0, values: [false, false, false, false] },

    // L
    { code: 0xF1, level: 1, values: [] },
    { code: 0xFE, level: 0, values: [] },
    { code: 0xF0, level: 0, values: [true] },

    // Nested mix - comprehensive use of all methods and value types
    { 
      code: 0xF0,  // L method (List) - root
      level: 2,    // With level 2 extension
      values: [
        // Various B method encodings
        42,        // B0 small int
        -128n,     // B1 negative BigInt
        65535,     // B2 larger int
        -8388608n, // B3 negative larger BigInt
        4294967295, // B4 large int
        1099511627775n, // B5 very large BigInt
        true,      // B0 boolean
        3.14159,   // B8 float
        -Infinity, // B8 special float
        
        // S method (String) with special characters
        "BONE\0with\0nulls",  // String with null bytes
        
        // Various T methods (Tuple)
        { code: 0xA0, level: 1, values: [false] },  // T1 with level extension
        { code: 0xB0, level: 0, values: [true, 255] },  // T2 basic
        { code: 0xC0, level: 3, values: [42, "abc", false] },  // T3 with level extension
        { code: 0xD0, level: 0, values: [0, 1, 2, 3] },  // T4 basic
        
        // Various B method ByteExt objects
        { code: 0x40, level: 1, bytes: new Uint8Array([0x42, 0x43]) },  // B2 with level
        { code: 0x60, level: 0, bytes: new Uint8Array([0x42, 0x43, 0x44, 0x45]) },  // B4
        { code: 0x1F, level: 2, bytes: new Uint8Array([0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) },  // B8 with level
        
        // Nested L method (empty list)
        { code: 0xF0, level: 1, values: [] },
        
        // Deeply nested structure combining multiple methods
        { 
          code: 0xF0,  // L method (nested list) 
          level: 0, 
          values: [
            "Hello\0World",  // S method with null byte
            { 
              code: 0xB0,  // T2 tuple
              level: 0, 
              values: [
                { code: 0xA0, level: 0, values: [123] },  // T1 inside T2
                { 
                  code: 0xF0,  // L method (nested in T2)
                  level: 0,
                  values: [
                    -2.71828,  // Float in list
                    { code: 0x50, level: 3, bytes: new Uint8Array([0x01, 0x02, 0x03]) },  // B3 with level in list
                    { code: 0xC0, level: 0, values: [0n, 1, "nested"] }  // T3 inside list
                  ]
                }
              ]
            },
            { 
              code: 0xE0,  // T8 tuple
              level: 2,
              values: [1, 2, 3, 4, 5, 6, 7, 8]  // 8 values
            },
            { 
              code: 0xF1,  // Another list variant
              level: 1,
              values: [
                { code: 0xF0, level: 0, values: [] },  // Empty list inside list
                { code: 0x80, level: 1, bytes: new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10]) }  // B16 with level
              ]
            }
          ] 
        }
      ]
    }
  ];
  // deno-fmt-ignore
  const bytes = [
    // B0
    [0x10],
    [0x17],
    [0x12],
    [0x21],
    [0x20],
    [0xFF, 0x20],
    [0x2F],

    // B1
    [0x0F, 0xFE], // -1
    [0x0F, 0x7F], // -128
    [0x18, 0x08], // 8
    [0x18, 0xFF], // 255
    [0x0F, 0x00], // -255
    [0x30, 0x42],
    [0xFF, 0xFF, 0x31, 0x42],
    [0x3F, 0x42],
    
    // B2
    [0x0E, 0xFE, 0xFF], // -256
    [0x0E, 0x7F, 0xFF], // -32768
    [0x19, 0x01, 0x00], // 256
    [0x19, 0xFF, 0xFF], // 65535
    [0x0E, 0x80, 0x00], // -32767
    [0x40, 0x42, 0x43],
    [0xFF, 0xFF, 0xFF, 0x41, 0x42, 0x43],
    [0x4F, 0x42, 0x43],
    
    // B3
    [0x0D, 0xFE, 0xFF, 0xFF], // -65536
    [0x0D, 0x7F, 0xFF, 0xFF], // -8388608
    [0x1A, 0x01, 0x00, 0x00], // 65536
    [0x1A, 0xFF, 0xFF, 0xFF], // 16777215
    [0x0D, 0x80, 0x00, 0x00], // -8388607
    [0x50, 0x42, 0x43, 0x44],
    [0xFF, 0xFF, 0x51, 0x42, 0x43, 0x44],
    [0x5F, 0x42, 0x43, 0x44],
    
    // B4
    [0x0C, 0xFE, 0xFF, 0xFF, 0xFF], // -16777216
    [0x0C, 0x7F, 0xFF, 0xFF, 0xFF], // -2147483648
    [0x1B, 0x01, 0x00, 0x00, 0x00], // 16777216
    [0x1B, 0xFF, 0xFF, 0xFF, 0xFF], // 4294967295
    [0x0C, 0x80, 0x00, 0x00, 0x00], // -2147483647
    [0x60, 0x42, 0x43, 0x44, 0x45],
    [0xFF, 0x61, 0x42, 0x43, 0x44, 0x45],
    [0x6F, 0x42, 0x43, 0x44, 0x45],
    
    // B5
    [0x0B, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF], // -4294967296
    [0x0B, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF], // -549755813888
    [0x1C, 0x01, 0x00, 0x00, 0x00, 0x00], // 4294967296
    [0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // 1099511627775
    [0x0B, 0x80, 0x00, 0x00, 0x00, 0x00], // -549755813887
    [0x0B, 0x42, 0x43, 0x44, 0x45, 0x46],
    [0xFF, 0xFF, 0x1C, 0x42, 0x43, 0x44, 0x45, 0x46],
    [0xFF, 0x0B, 0x42, 0x43, 0x44, 0x45, 0x46],
    
    // B6
    [0x0A, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -1099511627776
    [0x0A, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -140737488355328
    [0x1D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00], // 1099511627776
    [0x1D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // 281474976710655
    [0x0A, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00], // -140737488355327
    [0x0A, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47],
    [0x1D, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47],
    [0xFF, 0xFF, 0x1D, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47],
    
    // B7
    [0x09, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -281474976710656
    [0x09, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -36028797018963968
    [0x1E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 281474976710656
    [0x1E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // 72057594037927935
    [0x09, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // -36028797018963967
    [0x09, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48],
    [0x1E, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48],
    [0xFF, 0xFF, 0xFF, 0x1E, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48],
    
    // B8
    [0x08, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -72057594037927936
    [0x08, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // -9223372036854775808
    [0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 72057594037927936
    [0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF], // 18446744073709551615
    [0x08, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // -9223372036854775807
    [0x70, 0xc0, 0x09, 0x21, 0xf9, 0xf0, 0x1b, 0x86, 0x6e], // 3.14159
    [0x70, 0x3f, 0xfa, 0x40, 0xf6, 0x6a, 0x55, 0x08, 0x6f], // -2.71828
    [0x70, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // Infinity
    [0x70, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], // -Infinity
    [0x08, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49],
    [0x1F, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49],
    [0xFF, 0x1F, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49],
    
    // B16
    [0x80, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51],
    [0xFF, 0xFF, 0x81, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51],
    [0x8F, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51],
    
    // S
    [0x90, 0x00],
    [0x90, 0x41, 0x42, 0x43, 0x00],
    [0x90, 0x00, 0x01, 0x00],
    [0xFF, 0x9F, 0x00, 0x01, 0xFF, 0x00],

    // T
    [0xFF, 0xFF, 0xA0, 0x20],
    [0xB0, 0x20, 0x20],
    [0xC0, 0x20, 0x20, 0x20],
    [0xD0, 0x20, 0x20, 0x20, 0x20],

    // L
    [0xFF, 0xF1, 0x00],
    [0xFE, 0x00],
    [0xF0, 0x21, 0x00],
    
    // Nested mix - comprehensive example using all methods and types
    [
      // Root list (L method) with level 2 extension
      0xFF, 0xFF, 0xF0,  // L method with double level extension (level 2)
      
      // B method encodings (various integer types)
      0x18, 0x2A,        // 42 (B1 method 1-byte positive integer)
      0x0F, 0x7F,        // -128n (B1 method 1-byte negative integer)
      0x19, 0xFF, 0xFF,  // 65535 (B2 method 2-byte positive integer)
      0x0D, 0x7F, 0xFF, 0xFF,  // -8388608n (B3 method 3-byte negative integer)
      0x1B, 0xFF, 0xFF, 0xFF, 0xFF,  // 4294967295 (B4 method 4-byte positive integer)
      0x1C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // 1099511627775n (B5 method 5-byte positive bigint)
      
      // B method boolean
      0x21,  // true (B0 method boolean)
      
      // B method float encodings
      0x70, 0xC0, 0x09, 0x21, 0xF9, 0xF0, 0x1B, 0x86, 0x6E,  // 3.14159 (B8 method 64-bit float)
      0x70, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // -Infinity (B8 method 64-bit float)
      
      // S method string with escaped null bytes
      0x90, 0x42, 0x4F, 0x4E, 0x45, 0x00, 0x01, 0x77, 0x69, 0x74, 0x68, 0x00, 0x01, 
      0x6E, 0x75, 0x6C, 0x6C, 0x73, 0x00,  // "BONE\0with\0nulls" (S method string with escaped nulls)
      
      // T method tuples of different sizes and levels
      0xFF, 0xA0, 0x20,  // T1 method tuple with level 1 and a single false value
      0xB0, 0x21, 0x18, 0xFF,  // T2 method tuple with two values: true and 255
      0xFF, 0xFF, 0xFF, 0xC0, 0x18, 0x2A, 0x90, 0x61, 0x62, 0x63, 0x00, 0x20,  // T3 method with level 3 extension containing: 42, "abc", false
      0xD0, 0x10, 0x11, 0x12, 0x13,  // T4 method tuple with four values: 0, 1, 2, 3
      
      // B method ByteExt with raw bytes
      0xFF, 0x40, 0x42, 0x43,  // B2 method with level 1 extension containing raw bytes [0x42, 0x43]
      0x60, 0x42, 0x43, 0x44, 0x45,  // B4 method with raw bytes [0x42, 0x43, 0x44, 0x45]
      0xFF, 0xFF, 0x1F, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // B8 method with level 2 extension containing 8 bytes
      
      // Empty list with level extension
      0xFF, 0xF0, 0x00,  // Empty list (L method) with level 1 extension
      
      // Start of a deeply nested structure
      0xF0,  // Start of nested list (L method)
        
        // String with null byte inside
        0x90, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x00, 0x01, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x00,  // "Hello\0World"
        
        // Tuple with nested value
        0xB0,  // T2 method tuple start
          0xA0, 0x18, 0x7B,  // T1 method tuple with a single value 123
          0xF0,  // L method list start
            0x70, 0x3F, 0xFA, 0x40, 0xF6, 0x6A, 0x55, 0x08, 0x6F,  // -2.71828 (B8 method 64-bit float)
            0xFF, 0xFF, 0xFF, 0x50, 0x01, 0x02, 0x03,  // B3 method with level 3 extension containing 3 bytes
            0xC0, 0x10, 0x11, 0x90, 0x6E, 0x65, 0x73, 0x74, 0x65, 0x64, 0x00,  // T3 method containing: 0, 1, "nested"
          0x00,  // End of L method list
        // End of T2 tuple
        
        // T8 tuple with level extension
        0xFF, 0xFF, 0xE0, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x08,  // T8 method with level 2 extension containing values 1-8
        
        // Nested list with level extension
        0xFF, 0xF1,  // L method with level 1 extension (variant 0xF1)
          0xF0, 0x00,  // Empty nested list
          0xFF, 0x80, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 
          0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,  // B16 method with level 1 extension containing 16 bytes
        0x00,  // End of nested list with level
        
      0x00, // End of main nested list
      0x00  // Extra termination byte
    ]
  ]
  for (const i of values.keys()) {
    assertEquals(
      encode([values[i]]),
      new Uint8Array(bytes[i]),
      `#${i}`,
    );
  }
});

Deno.test("arbs.value is encodable", () => {
  fc.assert(fc.property(fc.array(arbs.value), (values) => {
    encode(values);
  }));
});
